#!/bin/sh
set -e

EXIT_OK=0
EXIT_USAGE=1
EXIT_FAILURE=2
# EXIT_RETRY=3

usage() {
    echo "
USAGE
    node-red plugin for thin-edge.io

    $0 <COMMAND> [MODULE_NAME] [--module-version [VERSION]] [--file [FILE]]

    $0 install <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    $0 list
    $0 remove <MODULE_NAME> [--module-version [VERSION]]
    $0 prepare <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    $0 finalize <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]
    $0 update-list <MODULE_NAME> [--module-version [VERSION]] [--file [FILE]]

    # /etc/tedge/sm-plugins/nodered install example01 --module-version
    "
}

log() { echo "$@" >&2; }

if [ $# -lt 1 ]; then
    log "Invalid number of positional arguments."
    usage
    exit "$EXIT_USAGE"
fi

MODULE_VERSION=latest
FILE=

# settings
PLUGIN_NAME=nodered
NODERED_USER=""
NODERED_DIR=""
PROP_ACTIVE_PROJECT="active-project"
NODERED_API="http://localhost:1880"
NODERED_START_SERVICE="1"


# Only read the file if it has the correct permissions, to prevent people from editing it
# and side-loading functions
SETTINGS_FILE=/etc/tedge-nodered/env
FOUND_FILE=
if [ -f "$SETTINGS_FILE" ]; then
    FOUND_FILE=$(find "$SETTINGS_FILE" -perm 644 | head -1)
fi

if [ -n "$FOUND_FILE" ]; then
    log "Loading setting file: $SETTINGS_FILE"
    # shellcheck disable=SC1091,SC1090
    . "$SETTINGS_FILE"
fi

# Try to detect .node-red folder
if [ -z "$NODERED_DIR" ]; then
    if [ -d /home ]; then
        for userhome in /home/*; do
            if [ -d "$userhome/.node-red" ]; then
                NODERED_DIR="$userhome/.node-red"
                NODERED_USER=$(basename "$userhome")
                break
            fi
        done
    elif [ -d /root/.node-red ]; then
        NODERED_DIR=/root/.node-red
        NODERED_USER=root
    fi
fi

# Fail if .node-red folder could not be found
if [ -z "$NODERED_DIR" ]; then
    log "Could not detect Node-RED directory. Please set the NODERED_DIR variable in $SETTINGS_FILE and try again"
    exit "$EXIT_USAGE"
fi
if [ ! -d "$NODERED_DIR" ]; then
    log "Node-RED directory (NODERED_DIR) does not exist. path=$NODERED_DIR":
    exit "$EXIT_USAGE"
fi

log "Using node-red settings: path=$NODERED_DIR, user=$NODERED_USER"

# Set derived settings after loading any settings file
ACTIVE_PROJECT_FILE="$NODERED_DIR/.active_project"

check_project_mode() {
    PROJECTS=$(nodered_api GET /projects)
    if [ -z "$PROJECTS" ]; then
        log "Warning: node-red projects are not enabled. node-red needs to have projects enabled for this plugin to work"
        exit 1
    fi
}

is_root() {
    [ "$(id -u)" -eq 0 ]
}

restart_node_red() {
    log "Restarting node-red"
    if systemctl restart nodered.service >/dev/null 2>&1; then
        log "Restarted node-red (wait for a few seconds before proceeding)"
        sleep 5
    else
        log "Failed to restart node-red."
    fi
}

activate_project() {
    name="$1"
    CURRENT_PROJECT=$(nodered_api GET /projects | jq -r '.active // ""')

    if [ "$CURRENT_PROJECT" = "$name" ]; then
        log "Project is already active, nothing to do. name=$name"
        return
    fi

    log "Changing node-red project. from=$CURRENT_PROJECT, to=$name"
    log "Activating the project: $name"
    response=$(nodered_api PUT "/projects/$name" -d '{"active":true,"clearContext":true}')

    if [ "$(echo "$response" | jq -r '.active')" = "$name" ]; then
        log "\nSuccessfully activated project. name=$name"
    else
        log "\nFailed however sometimes the service needs to be restarted before the setting is active. response=$response"
    fi

    sleep 2

    # Validate if it really was activated
    CURRENT_PROJECT=$(nodered_api GET /projects | jq -r '.active // ""')
    if [ "$CURRENT_PROJECT" != "$name" ]; then
        log "node-red project did not activate. Unexpected project name. got=$CURRENT_PROJECT, wanted=$name"
        exit "$EXIT_FAILURE"
    fi

    log "node-red project was activated successfully. name=$CURRENT_PROJECT"
}

project_exists() {
    name="$1"
    [ "$(nodered_api GET /projects | jq '.projects | index("'"$name"'")')" != "null" ]
}

create_project() {
    name="$1"
    url="$2"
    body="$(printf '{"name":"%s","credentialSecret":"","git":{"remotes":{"origin":{"url":"%s","username":"","password":""}}}}' "$name" "$url")"
    nodered_api POST /projects -d "$body"
}

is_project_active() {
    name="$1"
    active_project=$(nodered_api GET /projects | jq -r '.active // ""')
    [ "$name" = "$active_project" ]
}

install_project_from_tarball() {
    file="$1"
    version="$2"
    module_dir="$3"

    SUDO=""
    if is_root; then
        # Extract using the user node-red user to prevent file reading problems
        SUDO="sudo -u $NODERED_USER"
    fi

    if [ -d "$module_dir" ]; then
        log "Removing previously existing folder. path=$module_dir"
        rm -Rf "$module_dir"
    fi

    if [ ! -d "$module_dir" ]; then
        log "Creating project directory. path=$module_dir"
        $SUDO mkdir -p "$module_dir"
    fi

    if $SUDO tar -xvozf "$file" -C "$module_dir"; then
        log "Successfully installed package"
        echo "$version" | $SUDO tee "$module_dir/version"
    else
        log "Failed to install package"
        exit "$EXIT_FAILURE"
    fi
}


install_project_from_git_repo() {
    name="$1"
    url="$2"
    version="$3"
    module_dir="$4"

    if ! project_exists "$name"; then
        log "Registering new project with nodered: name=$name, url=$url, path=$module_dir"
        create_project "$name" "$url"
    else
        log "Project is already registered with nodered: name=$name, url=$url, path=$module_dir"

        # Project needs to be active before it can be pulled!
        if is_project_active "$name"; then
            nodered_api POST "/projects/$name/pull" -d '{}' -f
        fi
    fi

    # Check if this is necessary if the api is abstracting the git access now
    if command -v git >/dev/null 2>&1; then
        git config --global --add safe.directory "$module_dir" || log "Not a git repository. path=$module_dir"
    fi

    # Fix permissions
    SUDO=""
    if is_root; then
        # Extract using the user node-red user to prevent file reading problems
        SUDO="sudo -u $NODERED_USER"
    fi
    chown -R "$NODERED_USER:$NODERED_USER" "$module_dir"
}

nodered_api() {
    METHOD="$1"
    URL="$2"
    shift
    shift
    # Replace any spaces with the url escape char, %20
    ESCAPED_URL=$(echo "$URL" | sed 's/ /%20/g' | sed 's/^\///')
    log "Using nodered api: $METHOD $NODERED_API/$ESCAPED_URL $*"
    curl \
        --silent \
        -X "$METHOD" \
        -H "Node-Red-Api-Version: v2" \
        -H "Content-Type: application/json" \
        "$NODERED_API/$ESCAPED_URL" \
        "$@"
}

COMMAND=

# argument parsing
while [ $# -gt 0 ]; do
  case "$1" in
    --module-version)
        MODULE_VERSION="$2"
        shift
        ;;
    --file)
        FILE="$2"
        shift
        ;;
    -h|--help)
        usage
        exit "$EXIT_USAGE"
        ;;
    --*|-*)
        log "Unknown option $1"
        exit "$EXIT_USAGE"
        ;;
    *)
        if [ -z "$COMMAND" ]; then
            COMMAND="$1"
        else
            MODULE_NAME="$1"

            # Trim any leading whitespace
            # TODO: Check why this occurs when calling update-list...there might be a problem with the read loop.
            MODULE_NAME=$(echo "$MODULE_NAME" | sed -E 's/^\s*//g')

            if [ -z "$MODULE_NAME" ]; then
                log "Ignoring unknown positional argument: $1"
            fi
        fi
      ;;
  esac
  shift
done


case "$COMMAND" in
    list)
        if ! command -v node-red-pi >/dev/null 2>&1; then
            log "node-red-pi is not installed. Skipping plugin"
            exit 0
        fi

        if [ ! -d "$NODERED_DIR" ]; then
            echo "nodered directory does not exist. path=$NODERED_DIR"
            exit 0
        fi
        # -------------------------------------------------------------------
        # Mode: Projects
        # -------------------------------------------------------------------
        log "Scanning for node-red projects"

        # Report the active project (fallback to empty list of nodered is not running)
        RESPONSE=$(nodered_api GET /projects || echo '{"projects":[]}')
        ACTIVE_PROJECT=$(echo "$RESPONSE" | jq -r '.active // "none"')

        # Check other projects
        PROJECTS=$(echo "$RESPONSE" | jq -r '.projects[]')

        # Use while loop and here string to support project names with spaces in their names
        while read -r PROJECT; do
            if [ "$PROJECT" = "$ACTIVE_PROJECT" ]; then
                nodered_api GET "/projects/$PROJECT" | jq -r "[\"active-project\", .name], [\"$PROJECT\", .version] | @tsv"
            else
                if [ -f "$NODERED_DIR/projects/$PROJECT/package.json" ]; then
                    # node-red only allows querying the active project. So we have to resort to checking the package.json
                    jq -r "[\"$PROJECT\", .version] | @tsv" < "$NODERED_DIR/projects/$PROJECT/package.json"
                fi
            fi
        done <<EOF
$PROJECTS
EOF
        ;;

    install)

        #
        # Check for special project activating package
        # This package does not really exist, the version name is just
        # used to indicate which flow or project should be activated
        #
        if [ "$MODULE_NAME" = "$PROP_ACTIVE_PROJECT" ]; then
            log "Setting active project: name=$MODULE_VERSION"
            if [ -f "$ACTIVE_PROJECT_FILE" ]; then
                cp "$ACTIVE_PROJECT_FILE" "$ACTIVE_PROJECT_FILE.backup"
            fi
            printf "%s" "$MODULE_VERSION" > "$ACTIVE_PROJECT_FILE"
            exit 0
        fi

        log "Installing ${PLUGIN_NAME} package: ${MODULE_NAME}:${MODULE_VERSION}"

        if [ ! -f "$FILE" ]; then
            log "Package file not found"
            exit "$EXIT_FAILURE"
        fi

        log "debug: copying artifact to temp storage"
        cp "$FILE" "/tmp/_$(basename "$FILE").tmp"

        # -------------------------------------------------------------------
        # Mode: Project
        # -------------------------------------------------------------------
        MODULE_DIR="$NODERED_DIR/projects/$MODULE_NAME"

        # Detect the type of package
        if tar -tzf "$FILE" >/dev/null 2>&1; then
            log "Detected package type. type=tarball"
            install_project_from_tarball "$FILE" "$MODULE_VERSION" "$MODULE_DIR"
        else
            PROJECT_URL=$(grep "REPO=" "$FILE" | sed -E 's/^REPO=//g')

            if [ -n "$PROJECT_URL" ]; then
                log "Detected package type. type=url"
                install_project_from_git_repo "$MODULE_NAME" "$PROJECT_URL" "$MODULE_VERSION" "$MODULE_DIR"
            else
                log "Invalid package type. file=$FILE"
                exit "$EXIT_FAILURE"
            fi
        fi
        ;;


    remove)
        # don't fail if it does not exist

        # Support removing the project when the user removes the
        # active project.
        # This might be changed to actually just disable the project in node-red
        # but the API is unclear how to do this. So for now just remove the project.
        # The user can always just disable the node-red service if they want to disable
        # the project temporarily
        if [ "$MODULE_NAME" = "$PROP_ACTIVE_PROJECT" ]; then
            log "Setting project name from active project property: name=$MODULE_VERSION"
            MODULE_NAME="$MODULE_VERSION"
            # we don't know or care about the module version in this case
            MODULE_VERSION=""
        fi

        log "Removing ${PLUGIN_NAME} package: ${MODULE_NAME}:${MODULE_VERSION}"

        if is_project_active "$MODULE_NAME"; then
            #
            # Removing an active project currently requires nodered to be stopped
            # and the project be manually removed and configuration files are edited (not ideal!)
            #
            # TODO: Update once nodered has a better way of handling this via API
            # 
            log "Project is already active. nodered does not support disabling an active project, so we are doing it manually"
            systemctl disable nodered.service ||:
            systemctl stop nodered.service ||:

            log "Manually removing project folder: $NODERED_DIR/projects/$MODULE_NAME"
            rm -Rf "$NODERED_DIR/projects/$MODULE_NAME"

            # Manually edit projects file
            NODERED_PROJECT_CONFIG="$NODERED_DIR/.config.projects.json"

            if [ -f "$NODERED_PROJECT_CONFIG" ]; then
                # Backup file
                cp "$NODERED_PROJECT_CONFIG" "$NODERED_PROJECT_CONFIG.backup"

                # Edit config file
                log "Editing $NODERED_PROJECT_CONFIG file to remove '$MODULE_NAME' project"
                jq "del(.projects.\"$MODULE_NAME\", .activeProject)" "$NODERED_PROJECT_CONFIG" > "${NODERED_PROJECT_CONFIG}.new"
                mv "${NODERED_PROJECT_CONFIG}.new" "${NODERED_PROJECT_CONFIG}"
                chown "$NODERED_USER:$NODERED_USER" "${NODERED_PROJECT_CONFIG}"
            fi

            systemctl enable nodered.service ||:
            systemctl start nodered.service ||:
            sleep 5
        else
            #
            # Remove non-active project (via api)
            #
            if project_exists "$MODULE_NAME"; then
                log "Removing node-red project via api. name=$MODULE_NAME"
                nodered_api DELETE "/projects/$MODULE_NAME"
            fi
        fi

        if grep -F "$MODULE_NAME" "$ACTIVE_PROJECT_FILE" -q >/dev/null 2>&1; then
            rm -f "$ACTIVE_PROJECT_FILE"
        fi
        ;;

    prepare)
        # Enable Node-RED projects feature (required by this plugin)
        if ! grep -F "NODE_RED_ENABLE_PROJECTS=" "$NODERED_DIR/environment" -q >/dev/null 2>&1; then
            SUDO=""
            if is_root; then
                # Extract using the user node-red user to prevent file reading problems
                SUDO="sudo -u $NODERED_USER"
            fi
            log "Enabling Node-RED projects. Adding NODE_RED_ENABLE_PROJECTS=true to $NODERED_DIR/environment"
            echo "NODE_RED_ENABLE_PROJECTS=true" | $SUDO tee "$NODERED_DIR/environment" >/dev/null

            # Restart is required after activating project feature
            restart_node_red
        fi

        # Check if the api is reachable as this is an indication if it is running or not
        if ! nodered_api GET /projects 2>/dev/null; then
            log "Starting node-red as the endpoint was not reachable"
            restart_node_red
        fi

        # Verify that the project feature is enabled
        check_project_mode
        ;;

    finalize)
        # Activate the project package (if needed)

        # TODO: Before activating the flow or project, check that the project or flow file really exist.
        # If not then revert to the last know active state. Use last known state which is stored here: "$ACTIVE_PROJECT_FILE.backup"
        if [ -f "$ACTIVE_PROJECT_FILE" ]; then
            NEW_ACTIVE_PROJECT="$(head -n1 "$ACTIVE_PROJECT_FILE")"

            if [ -n "$NEW_ACTIVE_PROJECT" ]; then
                if ! project_exists "$NEW_ACTIVE_PROJECT"; then
                    log "Cannot active project as it nodered does not recognize it. name=$NEW_ACTIVE_PROJECT"
                    exit "$EXIT_FAILURE"
                fi
                if is_project_active "$NEW_ACTIVE_PROJECT"; then
                    log "project is already activated. name=$NEW_ACTIVE_PROJECT"
                else
                    activate_project "$NEW_ACTIVE_PROJECT"
                fi
            fi
        fi
        ;;

    update-list)
        # Let thin-edge.io call the script for each plugin
        exit "$EXIT_USAGE"
        ;;
esac

exit "$EXIT_OK"
